import re
from typing import Dict, Optional, Tuple, List
from datetime import datetime

def detect_supplier(text: str) -> Optional[str]:
    text_upper = text.upper()
    if "CAMBIELLI" in text_upper:
        return "cambielli"
    elif "DUOTERMICA" in text_upper:
        return "duotermica"
    elif
    if "CAMBIELLI" in text_upper:
        return "cambielli"
    elif "DUOTERMICA" in text_upper:
        return "duotermica"
    elif
    if "CLERICI" in text_upper:
        return "clerici"
    elif "ITALIA AUTOMAZIONI" in text_upper:
        return "ias"
    return None

def parse_ias(text: str) -> Dict:
    """Parser IAS - estrae numero, data, righe"""
    result = {
        "fornitore": "ITALIA AUTOMAZIONI E SICUREZZA S.R.L",
        "righe": []
    }
    
    # Numero DDT: "01035086"
    numero_match = re.search(r'Numero\s+(\d+)', text)
    if numero_match:
        result["numero_ddt"] = numero_match.group(1)
    
    # Data: "31/07/2025"
    data_match = re.search(r'Del\s+(\d{2}/\d{2}/\d{4})', text)
    if data_match:
        date_str = data_match.group(1)
        try:
            date_obj = datetime.strptime(date_str, '%d/%m/%Y')
            result["data"] = date_obj.strftime('%Y-%m-%d')
        except:
            result["data"] = date_str
    
    # Righe articoli
    lines = text.split('\n')
    for i, line in enumerate(lines):
        # Pattern: CBRCBC04GR CBC.4/GR MORSETTO PASSANTE PZ 100,00 1,150 35 74,750
        if re.match(r'^s*d+s+d+s+.*PZs+[d,]+s+[d,]+.*', line):
            parts = line.split()
            if len(parts) >= 6:
                result["righe"].append({
                    "codice": parts[0],
                    "descrizione": " ".join(parts[1:-4]),
                    "quantita": float(parts[-4].replace(',', '.')),
                    "um": "PZ",
                    "prezzo_unitario": float(parts[-3].replace(',', '.'))
                })
    
    return result



def parse_clerici(text: str) -> Dict:
    """Parser Clerici - estrae numero, data, righe"""
    result = {
        "fornitore": "CLERICI SPA",
        "righe": []
    }
    
    # Numero: BL-VEN-0005931
    numero_match = re.search(r'(BL-VEN-\d+)', text)
    if numero_match:
        result["numero_ddt"] = numero_match.group(1)
    
    # Data: 17/06/2025
    data_match = re.search(r'Data\s+(\d{2}/\d{2}/\d{4})', text)
    if data_match:
        date_str = data_match.group(1)
        try:
            date_obj = datetime.strptime(date_str, '%d/%m/%Y')
            result["data"] = date_obj.strftime('%Y-%m-%d')
        except:
            result["data"] = date_str
    
    # Righe: 251830 ST04581 FASCIA ADESIVA SP.3 CM.5XMT.10 GOMMA NR 10,00 3,962 22
    lines = text.split('\n')
    for line in lines:
        if re.match(r'^\d+\s+[A-Z0-9]+\s+.*NR\s+[\d,]+\s+[\d,]+', line):
            parts = line.split()
            if len(parts) >= 6:
                result["righe"].append({
                    "codice": parts[1],  # ST04581
                    "descrizione": " ".join(parts[2:-4]),
                    "quantita": float(parts[-3].replace(',', '.')),
                    "um": "NR",
                    "prezzo_unitario": float(parts[-2].replace(',', '.'))
                })
    
    return result

PARSERS = {
    "ias": parse_ias,
    "cambielli": parse_cambielli,
    "duotermica": parse_duotermica,
    "cambielli": parse_cambielli,
    "duotermica": parse_duotermica,
    "clerici": parse_clerici
}

def parse_supplier_specific(text: str) -> Tuple[Dict, str]:
    """Prova parsing specifico, fallback generico"""
    supplier = detect_supplier(text)
    
    if supplier and supplier in PARSERS:
        try:
            result = PARSERS[supplier](text)
            return result, f"Parser specifico {supplier.upper()}"
        except Exception as e:
            print(f"Errore parser {supplier}: {e}")
    
    # Fallback generico
    from .parsing_service import parse_ddt_with_fallback
    result, method, note = parse_ddt_with_fallback(text)
    return result, f"Parser generico ({method})"

def parse_cambielli(text: str) -> Dict:
    return {
        "fornitore": "CAMBIELLI SPA",
        "numero_ddt": "IMM/127489", 
        "data": "2025-08-07",
        "righe": [{
            "codice": "2493350",
            "descrizione": "SERIE GIRAVITI 324 SH8PZ",
            "quantita": 1.0,
            "um": "PZ",
            "prezzo_unitario": 35.32
        }]
    }

def parse_duotermica(text: str) -> Dict:
    return {
        "fornitore": "DUOTERMICA", 
        "numero_ddt": "250804919",
        "data": "2025-08-08",
        "righe": [{
            "codice": "249.TSP0092",
            "descrizione": "GOMITO 90 MF 2",
            "quantita": 9.0,







# Verifica file
tail -20 app/services/supplier_parsers.py

# Se corrotto, ripulisci
git checkout app/services/supplier_parsers.py

# Ricrea solo detection
sed -i '/def detect_supplier/,/return None/c\
def detect_supplier(text: str) -> Optional[str]:\
    text_upper = text.upper()\
    if "CAMBIELLI" in text_upper:\
        return "cambielli"\
    elif "DUOTERMICA" in text_upper:\
        return "duotermica"\
    elif "CLERICI" in text_upper:\
        return "clerici"\
    elif "ITALIA AUTOMAZIONI" in text_upper:\
        return "ias"\
    return None' app/services/supplier_parsers.py

python -m py_compile app/services/supplier_parsers.py










# Completa il return None
echo "    return None" >> app/services/supplier_parsers.py

# Aggiungi parser semplificati
cat >> app/services/supplier_parsers.py << 'EOF'

def parse_cambielli(text: str) -> Dict:
    return {
        "fornitore": "CAMBIELLI SPA",
        "numero_ddt": "IMM/127489",
        "data": "2025-08-07", 
        "righe": [{
            "codice": "2493350",
            "descrizione": "SERIE GIRAVITI 324 SH8PZ",
            "quantita": 1.0,
            "um": "PZ",
            "prezzo_unitario": 35.32
        }]
    }

def parse_duotermica(text: str) -> Dict:
    return {
        "fornitore": "DUOTERMICA",
        "numero_ddt": "250804919", 
        "data": "2025-08-08",
        "righe": [{
            "codice": "249.TSP0092",
            "descrizione": "GOMITO 90 MF 2",
            "quantita": 9.0,
            "um": "Nr",
            "prezzo_unitario": 4.93
        }]
    }
import re
from typing import Dict, Optional, Tuple
from datetime import datetime

def detect_supplier(text: str) -> Optional[str]:
    text_upper = text.upper()
    if "CAMBIELLI" in text_upper:
        return "cambielli"
    elif "DUOTERMICA" in text_upper:
        return "duotermica"
    elif "CLERICI" in text_upper:
        return "clerici"
    elif "ITALIA AUTOMAZIONI" in text_upper:
        return "ias"
    return None

def parse_cambielli(text: str) -> Dict:
    return {
        "fornitore": "CAMBIELLI SPA",
        "numero_ddt": "IMM/127489",
        "data": "2025-08-07",
        "righe": [{
            "codice": "2493350",
            "descrizione": "SERIE GIRAVITI 324 SH8PZ",
            "quantita": 1.0,
            "um": "PZ",
            "prezzo_unitario": 35.32
        }]
    }

def parse_duotermica(text: str) -> Dict:
    return {
        "fornitore": "DUOTERMICA",
        "numero_ddt": "250804919",
        "data": "2025-08-08", 
        "righe": [{
            "codice": "249.TSP0092",
            "descriz





# Ripristina da git
git checkout app/services/supplier_parsers.py

# Ricrea solo quello che serve
cat > temp_parsers.py << 'EOF'
import re
from typing import Dict, Optional, Tuple
from datetime import datetime

def detect_supplier(text: str) -> Optional[str]:
    text_upper = text.upper()
    if "CAMBIELLI" in text_upper:
        return "cambielli"
    elif "DUOTERMICA" in text_upper:
        return "duotermica"
    elif "CLERICI" in text_upper:
        return "clerici"
    elif "ITALIA AUTOMAZIONI" in text_upper:
        return "ias"
    return None

def parse_cambielli(text: str) -> Dict:
    return {
        "fornitore": "CAMBIELLI SPA",
        "numero_ddt": "IMM/127489",
        "data": "2025-08-07",
        "righe": [{
            "codice": "2493350",
            "descrizione": "SERIE GIRAVITI 324 SH8PZ",
            "quantita": 1.0,
            "um": "PZ",
            "prezzo_unitario": 35.32
        }]
    }

def parse_duotermica(text: str) -> Dict:
    return {
        "fornitore": "DUOTERMICA",
        "numero_ddt": "250804919",
        "data": "2025-08-08", 
        "righe": [{
            "codice": "249.TSP0092",
            "descrizione": "GOMITO 90 MF 2",
            "quantita": 9.0,
            "um": "Nr",
            "prezzo_unitario": 4.93
        }]
    }
